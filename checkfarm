local state = {
    isRunning = true,
    stats = {
        total = 0,
        done = 0,
        nuked = 0,
        wrongId = 0,
        skipped = 0
    },
    currentWorld = "",
    worldsProcessed = {}
}
function log(message)
    local timestamp = os.date("%H:%M:%S")
    print("["..timestamp.."] ["..getBot().name.."]: "..message)
    return true
end
function safeReadFile(path)
    local file = io.open(path, "r")
    if not file then
        log("‚ùå File not found: "..path)
        return nil
    end
    local content = file:read("*a")
    file:close()
    return content
end
function safeWriteFile(path, content)
    local file = io.open(path, "w")
    if not file then
        log("‚ùå Failed to write file: "..path)
        return false
    end
    file:write(content)
    file:close()
    return true
end
function countSeeds()
    local count = 0
    for _, tile in pairs(getBot():getWorld():getTiles()) do 
        if tile.fg == 4585 and getBot():getWorld():hasAccess(tile.x, tile.y) > 0 then 
            count = count + 1 
        end 
    end 
    return count 
end
function countBlock()
    return (getBot():getWorld().growscan:getObjects()[4584]) or 0
end
function loadWorldList()
    local content = safeReadFile(config.worldListPath)
    if not content then return nil end
    local worlds = {}
    for line in content:gmatch("[^\r\n]+") do
        local world, id = line:match("^([^|]+)|([^|]*)")
        if world then
            table.insert(worlds, {
                name = world:upper():gsub("%s+", ""),
                id = id and id:upper():gsub("%s+", "") or ""
            })
        end
    end
    if #worlds == 0 then
        log("‚ùå No valid worlds found in the list")
        return nil
    end
    log(string.format("üìã Loaded %d worlds from list", #worlds))
    return worlds
end
function warpToWorld(world, doorId)
    local attempts = 0
    local success = false
    local isWrongDoor = false
    while attempts < config.maxWarpAttempts and not success and state.isRunning do
        attempts = attempts + 1
        if getBot().status ~= BotStatus.online then
            log("üîå Bot offline, reconnecting...")
            getBot().auto_reconnect = true
            sleep(5000)
        end
        if doorId and doorId ~= "" then
            getBot():warp(world, doorId)
        else
            getBot():warp(world)
        end
        local startTime = os.time()
        while os.time() - startTime < (config.delayWarp/1000) and state.isRunning do
            if getBot():isInWorld(world) then
                if getTile(getBot().x, getBot().y).fg == 6 then
                    if attempts >= 3 then
                        isWrongDoor = true
                        log("üö™ Wrong door ID detected")
                        break
                    end
                else
                    success = true
                    break
                end
            end
            sleep(500)
        end
        if not getBot():isInWorld(world) and attempts == config.maxWarpAttempts then
            log("üí£ World appears to be nuked")
            state.stats.nuked = state.stats.nuked + 1
            return false, true
        end
    end
    if isWrongDoor then
        state.stats.wrongId = state.stats.wrongId + 1
    end
    return success, isWrongDoor
end
local webhookID = 0
function sendWebhookUpdate()
    if not config.useWebhook then return end
    local embed = {
        title = "<:arrow:1299670877583048795> https://discord.gg/nWwHDzRARF",
        color = 0x7338A0,
        fields = {
            {
                name = "Information",
                value = string.format(
                    "<:kk_ifyes:1175697092224749680> Done : %d\n<:gtNuke:691300583407353907> Nuked : %d\n<:wrong:1209967280381763674> Wrong ID : %d\n<:wrong:1209967280381763674> Skipped : %d\n<:Pepper:1184607292948234290> Total : %d",
                    state.stats.done,
                    state.stats.nuked,
                    state.stats.wrongId,
                    state.stats.skipped,
                    state.stats.total
                ),
                inline = true
            },
            {
                name = "Bot Info",
                value = string.format("Name : %s\nWorld : %s\nLevel : %d", getBot().name, state.currentWorld or "None", getBot().level),
                inline = true
            }
        },
        thumbnail = {url = "https://img.freepik.com/free-vector/isometric-pixel-art-summer-camping-scene_52683-85509.jpg?t=st=1744943997~exp=1744947597~hmac=98bd6fe48f63489e774352c357a3660528edba960b75057ac468fbbcd288bb65&w=826"},
        footer = {text = "Date : "..os.date("%Y-%m-%d %H:%M:%S")}
    }
    if #state.worldsProcessed > 0 and #state.worldsProcessed <= 10 then
        local worldsText = ""
        for _, world in ipairs(state.worldsProcessed) do
            worldsText = worldsText .. string.format("- %s (%s)(%d)\n", world.name, (countSeeds()),  (countBlock()))
        end
        table.insert(embed.fields, {
            name = "<:WorldList:1156644357135409262> Processed Worlds",
            value = worldsText,
            inline = false
        })
    end
    local webhook = Webhook.new(config.webhookUrl)
    webhook.embed1.use = true
    webhook.embed1.title = embed.title
    webhook.embed1.color = embed.color
    webhook.embed1.thumbnail = embed.thumbnail.url
    for _, field in ipairs(embed.fields) do
        webhook.embed1:addField(field.name, field.value, field.inline or false)
    end
    webhook.embed1.footer.text = embed.footer.text
    if webhookID == 0 then
        webhook:send()
        webhookID = wh.message_id
    else
        webhook:edit(webhookID)
    end
end
function main()
    log("üöÄ Farm Checeker started")
    local worlds = loadWorldList()
    if not worlds then return end
    state.stats.total = #worlds
    for _, world in ipairs(worlds) do
        if not state.isRunning then break end
        state.currentWorld = world.name
        log(string.format("üåê Processing world: %s (ID: %s)", world.name, world.id))
        local warpSuccess, isNuked = warpToWorld(world.name, world.id)
        if not warpSuccess then
            table.insert(state.worldsProcessed, {
                name = world.name,
                status = isNuked and "NUKED" or "SKIPPED"
            })
            sendWebhookUpdate()
            goto continue
        end
        table.insert(state.worldsProcessed, {
            name = world.name,
        })
        -- Update webhook
        sendWebhookUpdate()
        ::continue::
    end
    log(string.format(
        "üèÅ Script completed!\nResults: %d done, %d nuked, %d wrong ID, %d skipped",
        state.stats.done,
        state.stats.nuked,
        state.stats.wrongId,
        state.stats.skipped
    ))
    local resultText = ""
    for _, world in ipairs(state.worldsProcessed) do
        resultText = resultText .. string.format("%s|%s\n", world.name, (countSeeds()), (countBlock()))
    end
    safeWriteFile(config.resultPath, resultText)
end
main()
